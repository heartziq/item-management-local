// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package itempb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartManagementClient is the client API for CartManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartManagementClient interface {
	// Unary
	Retrieve(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error)
	// Server-streaming
	List(ctx context.Context, in *Item, opts ...grpc.CallOption) (CartManagement_ListClient, error)
	// Client-streaming
	Add(ctx context.Context, opts ...grpc.CallOption) (CartManagement_AddClient, error)
	// Bidi-streaming
	GetCart(ctx context.Context, opts ...grpc.CallOption) (CartManagement_GetCartClient, error)
	// .. more features ..
	Delete(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ReportSummary, error)
}

type cartManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewCartManagementClient(cc grpc.ClientConnInterface) CartManagementClient {
	return &cartManagementClient{cc}
}

func (c *cartManagementClient) Retrieve(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/item.CartManagement/retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartManagementClient) List(ctx context.Context, in *Item, opts ...grpc.CallOption) (CartManagement_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &CartManagement_ServiceDesc.Streams[0], "/item.CartManagement/list", opts...)
	if err != nil {
		return nil, err
	}
	x := &cartManagementListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CartManagement_ListClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type cartManagementListClient struct {
	grpc.ClientStream
}

func (x *cartManagementListClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cartManagementClient) Add(ctx context.Context, opts ...grpc.CallOption) (CartManagement_AddClient, error) {
	stream, err := c.cc.NewStream(ctx, &CartManagement_ServiceDesc.Streams[1], "/item.CartManagement/add", opts...)
	if err != nil {
		return nil, err
	}
	x := &cartManagementAddClient{stream}
	return x, nil
}

type CartManagement_AddClient interface {
	Send(*Item) error
	CloseAndRecv() (*ReportSummary, error)
	grpc.ClientStream
}

type cartManagementAddClient struct {
	grpc.ClientStream
}

func (x *cartManagementAddClient) Send(m *Item) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cartManagementAddClient) CloseAndRecv() (*ReportSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReportSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cartManagementClient) GetCart(ctx context.Context, opts ...grpc.CallOption) (CartManagement_GetCartClient, error) {
	stream, err := c.cc.NewStream(ctx, &CartManagement_ServiceDesc.Streams[2], "/item.CartManagement/getCart", opts...)
	if err != nil {
		return nil, err
	}
	x := &cartManagementGetCartClient{stream}
	return x, nil
}

type CartManagement_GetCartClient interface {
	Send(*User) error
	Recv() (*Item, error)
	grpc.ClientStream
}

type cartManagementGetCartClient struct {
	grpc.ClientStream
}

func (x *cartManagementGetCartClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cartManagementGetCartClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cartManagementClient) Delete(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ReportSummary, error) {
	out := new(ReportSummary)
	err := c.cc.Invoke(ctx, "/item.CartManagement/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartManagementServer is the server API for CartManagement service.
// All implementations must embed UnimplementedCartManagementServer
// for forward compatibility
type CartManagementServer interface {
	// Unary
	Retrieve(context.Context, *Item) (*Item, error)
	// Server-streaming
	List(*Item, CartManagement_ListServer) error
	// Client-streaming
	Add(CartManagement_AddServer) error
	// Bidi-streaming
	GetCart(CartManagement_GetCartServer) error
	// .. more features ..
	Delete(context.Context, *Item) (*ReportSummary, error)
	mustEmbedUnimplementedCartManagementServer()
}

// UnimplementedCartManagementServer must be embedded to have forward compatible implementations.
type UnimplementedCartManagementServer struct {
}

func (UnimplementedCartManagementServer) Retrieve(context.Context, *Item) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCartManagementServer) List(*Item, CartManagement_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCartManagementServer) Add(CartManagement_AddServer) error {
	return status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCartManagementServer) GetCart(CartManagement_GetCartServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedCartManagementServer) Delete(context.Context, *Item) (*ReportSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCartManagementServer) mustEmbedUnimplementedCartManagementServer() {}

// UnsafeCartManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartManagementServer will
// result in compilation errors.
type UnsafeCartManagementServer interface {
	mustEmbedUnimplementedCartManagementServer()
}

func RegisterCartManagementServer(s grpc.ServiceRegistrar, srv CartManagementServer) {
	s.RegisterService(&CartManagement_ServiceDesc, srv)
}

func _CartManagement_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartManagementServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.CartManagement/retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartManagementServer).Retrieve(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartManagement_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Item)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CartManagementServer).List(m, &cartManagementListServer{stream})
}

type CartManagement_ListServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type cartManagementListServer struct {
	grpc.ServerStream
}

func (x *cartManagementListServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

func _CartManagement_Add_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CartManagementServer).Add(&cartManagementAddServer{stream})
}

type CartManagement_AddServer interface {
	SendAndClose(*ReportSummary) error
	Recv() (*Item, error)
	grpc.ServerStream
}

type cartManagementAddServer struct {
	grpc.ServerStream
}

func (x *cartManagementAddServer) SendAndClose(m *ReportSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cartManagementAddServer) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CartManagement_GetCart_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CartManagementServer).GetCart(&cartManagementGetCartServer{stream})
}

type CartManagement_GetCartServer interface {
	Send(*Item) error
	Recv() (*User, error)
	grpc.ServerStream
}

type cartManagementGetCartServer struct {
	grpc.ServerStream
}

func (x *cartManagementGetCartServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cartManagementGetCartServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CartManagement_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartManagementServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.CartManagement/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartManagementServer).Delete(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

// CartManagement_ServiceDesc is the grpc.ServiceDesc for CartManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "item.CartManagement",
	HandlerType: (*CartManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "retrieve",
			Handler:    _CartManagement_Retrieve_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _CartManagement_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "list",
			Handler:       _CartManagement_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "add",
			Handler:       _CartManagement_Add_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "getCart",
			Handler:       _CartManagement_GetCart_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "item/item.proto",
}
